using System.Reflection;

namespace Infrastructure.Helper;

/// <summary>
/// This class is used to copy properties from one object to another
/// </summary>
public static class PropertyReflectionHelper
{
    /// <summary>
    /// This class is used to copy properties from one object to another
    /// Generic property copier using reflection
    /// This is 100% Generated by Phind AI
    /// and used Rider IDE to format the code
    /// </summary>
    /// <typeparam name="TTarget">Target type to create</typeparam>
    /// <typeparam name="TSource">Source type to copy from</typeparam>
    /// <param name="source">Source object instance</param>
    /// <returns>New target instance with copied values</returns>
    public static TTarget CopyProperties<TTarget, TSource>(TSource source)
        where TTarget : class
        where TSource : class
    {
        // Create a new instance of the target object
        var target = Activator.CreateInstance<TTarget>();

        // Set the binding flags
        const BindingFlags flags =
            BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase;

        // Loop through all the properties of the source object
        foreach (var sourceProp in typeof(TSource).GetProperties(flags))
        {
            // Get the property from the target object
            var targetProp = typeof(TTarget).GetProperty(sourceProp.Name, flags);

            // If the property is null or can't be written to, or the types don't match, skip
            if (
                targetProp == null
                || !targetProp.CanWrite
                || targetProp.PropertyType != sourceProp.PropertyType
            )
                continue;

            // Get the value from the source object
            var value = sourceProp.GetValue(source);

            // Set the value to the target object
            targetProp.SetValue(target, value);
        }

        return target;
    }
}
